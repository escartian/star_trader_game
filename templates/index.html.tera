<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Star Trader Game</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #333; }
        button { padding: 10px; background-color: #007bff; color: white; border: none; cursor: pointer; }
        button:hover { background-color: #0056b3; }
        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .resource-table { margin-bottom: 20px; }
        
        /* Form styles */
        form {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 10px 0;
        }
        form label {
            white-space: nowrap;
        }
        form input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        form button {
            margin: 0;
        }
        
        .info-panel {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            margin: 20px 0;
        }
        .fleet-table {
            font-size: 0.9em;
        }
        .fleet-table th, .fleet-table td {
            padding: 4px 8px;
        }
        .star-details {
            background: linear-gradient(to right,
            rgb(20, 34, 88),   /* Deep blue */
            rgb(70, 100, 200), /* Blue-white */
            rgb(173, 216, 230),/* White */
            rgb(255, 233, 140),/* Yellow-white */
            rgb(255, 214, 69), /* Yellow */
            rgb(230, 126, 34), /* Orange */
            rgb(255, 87, 51),  /* Red-orange */
            rgb(150, 36, 36)   /* Deep red */
            );
            color: white;
            text-shadow: 2px 2px 3px black;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .debug-window {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 80%;
            max-height: 80vh;
            overflow-y: auto;
        }
        .debug-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div id="debugOverlay" class="debug-overlay"></div>
    <div id="debugWindow" class="debug-window">
        <h2>Debug Console</h2>
        <div id="debugContent"></div>
        <button onclick="closeDebugWindow()">Close</button>
    </div>

    <h1>Welcome to Star Trader Game</h1>

    <div class="button-group">
        <button onclick="openDebugWindow()">Debug Console</button>
    </div>

    <form id="fleetSearchForm">
        <label for="fleetOwnerId">Search Fleets:</label>
        <input type="text" id="fleetOwnerId" placeholder="Owner ID" required>
        <button type="submit">Search Fleet</button>
    </form>

    <form id="getStarSystemForm">
        <label for="starSystemId">Select Star System:</label>
        <input type="number" id="starSystemId" name="starSystemId" placeholder="Enter Star System ID">
        <button type="submit">View Star System</button>
    </form>

    <form id="getPlayerDataForm">
        <label for="playerName">Retrieve Player Data:</label>
        <input type="text" id="playerName" name="playerName" placeholder="Enter Player Name">
        <button type="submit">Get Player Data</button>
    </form>

    <form id="getGalaxyMapForm">
        <button type="submit">View Galaxy Map</button>
    </form>
    <div id="result"></div>

    <script>
        let currently_displaying = null;

        function clearAllInfo() {
            document.getElementById('result').innerHTML = '';
            currently_displaying = null;
        }

        function openDebugWindow() {
            document.getElementById('debugWindow').style.display = 'block';
            document.getElementById('debugOverlay').style.display = 'block';
            // Example debug data - replace with actual debug info
            document.getElementById('debugContent').innerHTML = `
                <h3>Debug Information - WIP </h3>
                <pre>Game State: Active
                    Current Memory Usage: ...
                    Active Systems: ...
                    Player States: ...</pre>
            `;
        }

        function closeDebugWindow() {
            document.getElementById('debugWindow').style.display = 'none';
            document.getElementById('debugOverlay').style.display = 'none';
        }

        async function fetchData(url) {
            try {
                clearAllInfo();
                const response = await fetch(url);
                const data = await response.text();
                document.getElementById('result').innerHTML = data;
                if(url.includes('/player/')){
                    displayPlayerData(data);
                    currently_displaying = "player"
                }else if (url.includes('/star_system')) {
                    displayGalaxyMap(data);
                    currently_displaying = "star_system"
                }
                else if (url.includes('/galaxy_map')) {
                    displayGalaxyMap(data);
                    currently_displaying = "galaxy_map"
                }

            } catch (error) {
                document.getElementById('result').innerHTML = `<p>Error: ${error.message}</p>`;
            }
        }

        document.getElementById('getStarSystemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            clearAllInfo();
            const starSystemId = document.getElementById('starSystemId').value;
            try {
                const response = await fetch(`/star_system/${starSystemId}`);
                const dataString = await response.text();
                displayStarSystemData(starSystemId, dataString);
                currently_displaying = "star_system";
            } catch (error) {
                console.error("Error fetching star system data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch star system data</p>`;
            }
        });

        document.getElementById('getPlayerDataForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            clearAllInfo();
            const playerName = document.getElementById('playerName').value;
            try {
                const response = await fetch(`/player/${playerName}`);
                const dataString = await response.text();
                displayPlayerData(dataString);
                currently_displaying = "player";
            } catch (error) {
                console.error("Error fetching player data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch player data</p>`;
            }
        });

        document.getElementById('getGalaxyMapForm').addEventListener('click', async function(e) {
            e.preventDefault();
            clearAllInfo();
            try {
                const response = await fetch('/galaxy_map');
                const dataString = await response.text();
                displayGalaxyData(dataString);
                currently_displaying = "galaxy_map";
            } catch (error) {
                console.error("Error fetching galaxy data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch galaxy data</p>`;
            }
        });

        document.getElementById('fleetSearchForm').addEventListener('submit', (e) => {
            e.preventDefault();
            clearAllInfo();
            const ownerId = document.getElementById('fleetOwnerId').value;
            searchFleet(ownerId);
            currently_displaying = "fleet";
        });

        async function displayPlayerData(dataString) {
            try {
                const data = JSON.parse(dataString);
                
                // Main display
                const mainContent = `
                    <div class="info-panel">
                        <h2>Player Information</h2>
                        <h3>${data.name}</h3>
                        <p>Credits: ${data.credits?.toFixed(2) || 0}</p>
                        <h3>Resources</h3>
                        <table class="resource-table">
                            <tr><th>Resource Type</th><th>Quantity</th></tr>
                            ${Array.isArray(data.resources) ? data.resources.map(resource => `
                                <tr>
                                    <td>${resource.resource_type || 'N/A'}</td>
                                    <td>${resource.quantity || 0}</td>
                                </tr>
                            `).join('') : ''}
                        </table>
                    </div>
                `;
                document.getElementById('result').innerHTML = mainContent;

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse player data</p>`;
            }
        }  
    
        async function displayStarSystemData(id, dataString) {
            try {
                const data = JSON.parse(dataString);
                const starSystemInfo = document.createElement('div');
                starSystemInfo.innerHTML = `
                    <div class="star-details">
                        <h2>${data.star.name} System</h2>
                        <div style="display: flex; justify-content: space-between;">
                            <div>
                                <h3>Star Classification</h3>
                                <p>Type: ${data.star.star_type}</p>
                                <p>Coordinates: (${data.position.x}, ${data.position.y}, ${data.position.z})</p>
                            </div>
                            <div>
                                <h3>System Status</h3>
                                <p>Planets: ${data.planets.length}</p>
                                <p>Security Level: ${data.star.security_level || 'Unknown'}</p>
                            </div>
                        </div>
                    </div>

                    <h3>Planetary Bodies</h3>
                    <table class="star-system-table">
                        <tr>
                            <th>Name</th>
                            <th>Economy</th>
                            <th>Specialization</th>
                            <th>Danger</th>
                            <th>Biome</th>
                            <th>Actions</th>
                        </tr>
                        ${data.planets.map((planet, index) => `
                            <tr>
                                <td>${planet.name}</td>
                                <td>${planet.economy || 'N/A'}</td>
                                <td>${planet.specialization || 'N/A'}</td>
                                <td>${planet.danger || 'Low'}</td>
                                <td>${planet.biome || 'Unknown'}</td>
                                <td>
                                    <button onclick="showPlanetMarket(${id}, ${index})">View Market</button>
                                </td>
                            </tr>
                        `).join('')}
                    </table>
                `;
                document.getElementById('result').innerHTML = '';
                document.getElementById('result').appendChild(starSystemInfo);

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse star system data</p>`;
            }
        }

        async function showPlanetMarket(systemId, planetId) {
            try {
                // Remove any existing market displays
                const existingMarkets = document.querySelectorAll('.market-panel');
                existingMarkets.forEach(market => market.remove());

                const response = await fetch(`/planet/${systemId}/${planetId}/market`);
                const marketData = await response.json();
                
                const marketDisplay = document.createElement('div');
                marketDisplay.className = 'market-panel info-panel';
                marketDisplay.innerHTML = `
                    <h3>Planet Market</h3>
                    <table class="resource-table">
                        <tr>
                            <th>Resource</th>
                            <th>Buy Price</th>
                            <th>Sell Price</th>
                            <th>Available</th>
                            <th>Actions</th>
                        </tr>
                        ${marketData.map(resource => `
                            <tr>
                                <td>${resource.resource_type}</td>
                                <td>${resource.buy ? resource.buy.toFixed(2) : 'N/A'}</td>
                                <td>${resource.sell ? resource.sell.toFixed(2) : 'N/A'}</td>
                                <td>${resource.quantity || 0}</td>
                                <td>
                                    ${resource.buy ? `
                                        <button onclick="buyResource(${systemId}, ${planetId}, '${resource.resource_type}', 1)">Buy 1</button>
                                        <button onclick="buyResource(${systemId}, ${planetId}, '${resource.resource_type}', 10)">Buy 10</button>
                                    ` : ''}
                                    ${resource.sell ? `
                                        <button onclick="sellResource(${systemId}, ${planetId}, '${resource.resource_type}', 1)">Sell 1</button>
                                        <button onclick="sellResource(${systemId}, ${planetId}, '${resource.resource_type}', 10)">Sell 10</button>
                                    ` : ''}
                                </td>
                            </tr>
                        `).join('')}
                    </table>
                `;
                
                document.getElementById('result').appendChild(marketDisplay);
            } catch (error) {
                console.error("Error fetching market data:", error);
                document.getElementById('result').innerHTML += `<p>Error: Unable to load market data</p>`;
            }
        }

        async function buyResource(systemId, planetId, resourceType, quantity) {
            try {
                const response = await fetch(`/planet/${systemId}/${planetId}/buy/${resourceType}/${quantity}`);
                const result = await response.json();
                alert(result);
                
                // Get the current player name from the form
                const playerName = document.getElementById('playerName').value;
                if (!playerName) {
                    alert("Please enter your player name first");
                    return;
                }

                // Refresh player data
                const playerResponse = await fetch(`/player/${playerName}`);
                const playerData = await playerResponse.text();
                
                // Update the player display
                const playerDisplay = document.querySelector('.info-panel:not(.market-panel)');
                if (playerDisplay) {
                    const playerDataObj = JSON.parse(playerData);
                    playerDisplay.innerHTML = `
                        <h2>Player Information</h2>
                        <h3>${playerDataObj.name}</h3>
                        <p>Credits: ${playerDataObj.credits?.toFixed(2) || 0}</p>
                        <h3>Resources</h3>
                        <table class="resource-table">
                            <tr><th>Resource Type</th><th>Quantity</th></tr>
                            ${Array.isArray(playerDataObj.resources) ? playerDataObj.resources.map(resource => `
                                <tr>
                                    <td>${resource.resource_type || 'N/A'}</td>
                                    <td>${resource.quantity || 0}</td>
                                </tr>
                            `).join('') : ''}
                        </table>
                    `;
                }

                // Refresh market display
                await showPlanetMarket(systemId, planetId);
            } catch (error) {
                console.error("Error buying resource:", error);
                alert("Error buying resource");
            }
        }

        async function sellResource(systemId, planetId, resourceType, quantity) {
            try {
                const response = await fetch(`/planet/${systemId}/${planetId}/sell/${resourceType}/${quantity}`);
                const result = await response.json();
                alert(result);
                
                // Get the current player name from the form
                const playerName = document.getElementById('playerName').value;
                if (!playerName) {
                    alert("Please enter your player name first");
                    return;
                }

                // Refresh player data
                const playerResponse = await fetch(`/player/${playerName}`);
                const playerData = await playerResponse.text();
                
                // Update the player display
                const playerDisplay = document.querySelector('.info-panel:not(.market-panel)');
                if (playerDisplay) {
                    const playerDataObj = JSON.parse(playerData);
                    playerDisplay.innerHTML = `
                        <h2>Player Information</h2>
                        <h3>${playerDataObj.name}</h3>
                        <p>Credits: ${playerDataObj.credits?.toFixed(2) || 0}</p>
                        <h3>Resources</h3>
                        <table class="resource-table">
                            <tr><th>Resource Type</th><th>Quantity</th></tr>
                            ${Array.isArray(playerDataObj.resources) ? playerDataObj.resources.map(resource => `
                                <tr>
                                    <td>${resource.resource_type || 'N/A'}</td>
                                    <td>${resource.quantity || 0}</td>
                                </tr>
                            `).join('') : ''}
                        </table>
                    `;
                }

                // Refresh market display
                await showPlanetMarket(systemId, planetId);
            } catch (error) {
                console.error("Error selling resource:", error);
                alert("Error selling resource");
            }
        }

        async function displayGalaxyData(dataString) {
            try {
                const data = JSON.parse(dataString);
                const galaxyInfo = document.createElement('div');
                let systemsHtml = '';

                data.forEach(system => {
                    systemsHtml += `
                        <div class="star-details">
                            <h3>${system.star.name}</h3>
                            <p>Type: ${system.star.star_type}</p>
                            <p>Location: (${system.position.x}, ${system.position.y}, ${system.position.z})</p>
                            <p>Planets: ${system.planets.length}</p>
                        </div>
                    `;
                });

                galaxyInfo.innerHTML = `
                    <h2>Galaxy Map</h2>
                    ${systemsHtml}
                `;
                
                document.getElementById('result').innerHTML = '';
                document.getElementById('result').appendChild(galaxyInfo);

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse galaxy data</p>`;
            }
        }

        async function searchFleet(ownerId) {
            try {
                const response = await fetch(`/fleets/${ownerId}`);
                const fleets = await response.json();
                
                if (fleets && fleets.length > 0) {
                    document.getElementById('result').innerHTML = fleets.map(fleet => `
                        <div class="info-panel">
                            <h4>${fleet.name}</h4>
                            <p>Owner: ${fleet.owner_id}</p>
                            <p>Location: (${fleet.position.x}, ${fleet.position.y}, ${fleet.position.z})</p>
                            <p>Total Ships: ${fleet.ships.length}</p>
                            <h5>Ships:</h5>
                            <table class="fleet-table">
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Health</th>
                                    <th>Shields</th>
                                    <th>Weapons</th>
                                    <th>Cargo</th>
                                </tr>
                                ${fleet.ships.map(ship => `
                                    <tr>
                                        <td>${ship.name}</td>
                                        <td>${ship.specialization}</td>
                                        <td>${ship.hp}/100</td>
                                        <td>${ship.shields.strength}/100</td>
                                        <td>${ship.weapons ? ship.weapons.map(w => {
                                            const weaponName = Object.keys(w)[0];
                                            return weaponName.replace(/([A-Z])/g, ' $1').trim();
                                        }).join(', ') : 'None'}</td>
                                        <td>${ship.cargo ? ship.cargo.length : 0} units</td>
                                    </tr>
                                `).join('')}
                            </table>
                        </div>
                    `).join('<hr>');
                } else {
                    document.getElementById('result').innerHTML = '<p>No fleets found</p>';
                }
            } catch (error) {
                console.error("Error loading fleet information:", error);
                document.getElementById('result').innerHTML = '<p>Error loading fleet information</p>';
            }
        }
    </script>
</body>
</html>