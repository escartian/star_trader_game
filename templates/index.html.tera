<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Star Trader Game</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #333; }
        button { display: block; margin-top: 20px; padding: 10px; background-color: #007bff; color: white; border: none; cursor: pointer; }
        button:hover { background-color: #0056b3; }
        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .resource-table { margin-bottom: 20px; }
        
        /* New styles */
        .player-info-corner {
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            max-width: 300px;
        }
        .star-details {
            background: linear-gradient(to right,rgb(20, 34, 88), rgb(20, 34, 88),rgb(72, 206, 32), #fdbb2d);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .debug-window {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 80%;
            max-height: 80vh;
            overflow-y: auto;
        }
        .debug-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div id="playerInfoCorner" class="player-info-corner"></div>
    <div id="debugOverlay" class="debug-overlay"></div>
    <div id="debugWindow" class="debug-window">
        <h2>Debug Console</h2>
        <div id="debugContent"></div>
        <button onclick="closeDebugWindow()">Close</button>
    </div>

    <h1>Welcome to Star Trader Game</h1>

    <div class="button-group">
        <button onclick="openDebugWindow()">Debug Console</button>
        <button onclick="viewFleet()">View Fleet</button>
    </div>

    <form id="getStarSystemForm">
        <label for="starSystemId">Select Star System:</label>
        <input type="number" id="starSystemId" name="starSystemId" placeholder="Enter Star System ID">
        <button type="submit">View Star System</button>
    </form>

    <form id="getPlayerDataForm">
        <label for="playerName">Retrieve Player Data:</label>
        <input type="text" id="playerName" name="playerName" placeholder="Enter Player Name">
        <button type="submit">Get Player Data</button>
    </form>

    <form id="getGalaxyMapForm">
        <button type="submit">View Galaxy Map</button>
    </form>
    <div id="result"></div>

    <script>
        let currently_displaying = null;

        function openDebugWindow() {
            document.getElementById('debugWindow').style.display = 'block';
            document.getElementById('debugOverlay').style.display = 'block';
            // Example debug data - replace with actual debug info
            document.getElementById('debugContent').innerHTML = `
                <h3>Debug Information - WIP </h3>
                <pre>Game State: Active
                    Current Memory Usage: ...
                    Active Systems: ...
                    Player States: ...</pre>
            `;
        }

        function closeDebugWindow() {
            document.getElementById('debugWindow').style.display = 'none';
            document.getElementById('debugOverlay').style.display = 'none';
        }

        function viewFleet() {
            // This will be implemented when the fleet endpoint is ready
            alert('Fleet management coming soon!');
        }

        async function fetchData(url) {
            try {
                const response = await fetch(url);
                const data = await response.text();
                document.getElementById('result').innerHTML = data;
                if(url.includes('/player/')){
                    displayPlayerData(data);
                    currently_displaying = "player"
                }else if (url.includes('/star_system')) {
                    displayGalaxyMap(data);
                }
                else if (url.includes('/galaxy_map')) {
                    displayGalaxyMap(data);
                }

            } catch (error) {
                document.getElementById('result').innerHTML = `<p>Error: ${error.message}</p>`;
            }
        }

        document.getElementById('getStarSystemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const starSystemId = document.getElementById('starSystemId').value;
            try {
                const response = await fetch(`/star_system/${starSystemId}`);
                const dataString = await response.text();
                displayStarSystemData(starSystemId, dataString);
            } catch (error) {
                console.error("Error fetching star system data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch star system data</p>`;
            }
        });

        document.getElementById('getPlayerDataForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const playerName = document.getElementById('playerName').value;
            try {
                const response = await fetch(`/player/${playerName}`);
                const dataString = await response.text();
                displayPlayerData(dataString);
            } catch (error) {
                console.error("Error fetching player data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch player data</p>`;
            }
        });

        document.getElementById('getGalaxyMapForm').addEventListener('click', async function(e) {
            e.preventDefault();
            try {
                const response = await fetch('/galaxy_map');
                const dataString = await response.text();
                displayGalaxyData(dataString);
            } catch (error) {
                console.error("Error fetching galaxy data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch galaxy data</p>`;
            }
        });

        async function displayPlayerData(dataString) {
            try {
                const data = JSON.parse(dataString);
                
                // Update corner display
                const cornerHtml = `
                    <h3>${data.name}</h3>
                    <p>Credits: ${data.credits?.toFixed(2) || 0}</p>
                `;
                document.getElementById('playerInfoCorner').innerHTML = cornerHtml;

                // Main display
                const mainContent = `
                    <h2>Detailed Player Information</h2>
                    <table class="resource-table">
                        <tr><th>Resource Type</th><th>Quantity</th></tr>
                        ${Array.isArray(data.resources) ? data.resources.map(resource => `
                            <tr>
                                <td>${resource.resource_type || 'N/A'}</td>
                                <td>${resource.quantity || 0}</td>
                            </tr>
                        `).join('') : ''}
                    </table>
                `;
                document.getElementById('result').innerHTML = mainContent;

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse player data</p>`;
            }
        }  
    
        async function displayStarSystemData(id, dataString) {
            try {
                const data = JSON.parse(dataString);
                const starSystemInfo = document.createElement('div');
                starSystemInfo.innerHTML = `
                    <div class="star-details">
                        <h2>${data.star.name} System</h2>
                        <div style="display: flex; justify-content: space-between;">
                            <div>
                                <h3>Star Classification</h3>
                                <p>Type: ${data.star.star_type}</p>
                                <p>Coordinates: (${data.position.x}, ${data.position.y}, ${data.position.z})</p>
                            </div>
                            <div>
                                <h3>System Status</h3>
                                <p>Planets: ${data.planets.length}</p>
                                <p>Security Level: ${data.star.security_level || 'Unknown'}</p>
                            </div>
                        </div>
                    </div>

                    <h3>Planetary Bodies</h3>
                    <table class="star-system-table">
                        <tr><th>Name</th><th>Economy</th><th>Specialization</th><th>Danger</th><th>Biome</th></tr>
                        ${data.planets.map(planet => `
                            <tr>
                                <td>${planet.name}</td>
                                <td>${planet.economy || 'N/A'}</td>
                                <td>${planet.specialization || 'N/A'}</td>
                                <td>${planet.danger || 'Low'}</td>
                                <td>${planet.biome || 'Unknown'}</td>
                            </tr>
                        `).join('')}
                    </table>
                `;
                document.getElementById('result').innerHTML = '';
                document.getElementById('result').appendChild(starSystemInfo);

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse star system data</p>`;
            }
        }

        async function displayGalaxyData(dataString) {
            try {
                const data = JSON.parse(dataString);
                const galaxyInfo = document.createElement('div');
                let systemsHtml = '';

                data.forEach(system => {
                    systemsHtml += `
                        <div class="star-details">
                            <h3>${system.star.name}</h3>
                            <p>Type: ${system.star.star_type}</p>
                            <p>Location: (${system.position.x}, ${system.position.y}, ${system.position.z})</p>
                            <p>Planets: ${system.planets.length}</p>
                        </div>
                    `;
                });

                galaxyInfo.innerHTML = `
                    <h2>Galaxy Map</h2>
                    ${systemsHtml}
                `;
                
                document.getElementById('result').innerHTML = '';
                document.getElementById('result').appendChild(galaxyInfo);

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse galaxy data</p>`;
            }
        }
    </script>
</body>
</html>