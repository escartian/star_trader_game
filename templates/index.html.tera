<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Star Trader Game</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #333; }
        button { padding: 10px; background-color: #007bff; color: white; border: none; cursor: pointer; }
        button:hover { background-color: #0056b3; }
        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .resource-table { margin-bottom: 20px; }
        
        /* Form styles */
        form {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 10px 0;
        }
        form label {
            white-space: nowrap;
        }
        form input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        form button {
            margin: 0;
        }
        
        .info-panel {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            margin: 20px 0;
        }
        .fleet-table {
            font-size: 0.9em;
        }
        .fleet-table th, .fleet-table td {
            padding: 4px 8px;
        }
        .star-details {
            background: linear-gradient(to right,
            rgb(20, 34, 88),   /* Deep blue */
            rgb(70, 100, 200), /* Blue-white */
            rgb(173, 216, 230),/* White */
            rgb(255, 233, 140),/* Yellow-white */
            rgb(255, 214, 69), /* Yellow */
            rgb(230, 126, 34), /* Orange */
            rgb(255, 87, 51),  /* Red-orange */
            rgb(150, 36, 36)   /* Deep red */
            );
            color: white;
            text-shadow: 2px 2px 3px black;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .debug-window {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 80%;
            max-height: 80vh;
            overflow-y: auto;
        }
        .debug-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .notification {
            transition: opacity 0.5s ease-in-out;
        }

        .close-notification {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            color: #666;
            padding: 0 5px;
        }

        .close-notification:hover {
            color: #000;
        }

        .trade-actions {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .custom-amount {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .custom-amount input {
            width: 80px;
            padding: 4px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .custom-amount button {
            padding: 4px 8px;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div id="debugOverlay" class="debug-overlay"></div>
    <div id="debugWindow" class="debug-window">
        <h2>Debug Console</h2>
        <div id="debugContent"></div>
        <button onclick="closeDebugWindow()">Close</button>
    </div>

    <h1>Welcome to Star Trader Game</h1>

    <div class="button-group">
        <button onclick="openDebugWindow()">Debug Console</button>
    </div>

    <form id="fleetSearchForm">
        <label for="fleetOwnerId">Search Fleets:</label>
        <input type="text" id="fleetOwnerId" placeholder="Owner ID" required>
        <button type="submit">Search Fleet</button>
    </form>

    <form id="getStarSystemForm">
        <label for="starSystemId">Select Star System:</label>
        <input type="number" id="starSystemId" name="starSystemId" placeholder="Enter Star System ID">
        <button type="submit">View Star System</button>
    </form>

    <form id="getPlayerDataForm">
        <label for="playerName">Retrieve Player Data:</label>
        <input type="text" id="playerName" name="playerName" placeholder="Enter Player Name">
        <button type="submit">Get Player Data</button>
    </form>

    <form id="getGalaxyMapForm">
        <button type="submit">View Galaxy Map</button>
    </form>
    <div id="result"></div>

    <script>
        let currently_displaying = null;

        function clearAllInfo() {
            document.getElementById('result').innerHTML = '';
            currently_displaying = null;
        }

        function openDebugWindow() {
            document.getElementById('debugWindow').style.display = 'block';
            document.getElementById('debugOverlay').style.display = 'block';
            // Example debug data - replace with actual debug info
            document.getElementById('debugContent').innerHTML = `
                <h3>Debug Information - WIP </h3>
                <pre>Game State: Active
                    Current Memory Usage: ...
                    Active Systems: ...
                    Player States: ...</pre>
            `;
        }

        function closeDebugWindow() {
            document.getElementById('debugWindow').style.display = 'none';
            document.getElementById('debugOverlay').style.display = 'none';
        }

        async function fetchData(url) {
            try {
                clearAllInfo();
                const response = await fetch(url);
                const data = await response.text();
                document.getElementById('result').innerHTML = data;
                if(url.includes('/player/')){
                    displayPlayerData(data);
                    currently_displaying = "player"
                }else if (url.includes('/star_system')) {
                    displayStarSystemData(starSystemId, dataString);
                    currently_displaying = "star_system"
                }
                else if (url.includes('/galaxy_map')) {
                    displayGalaxyMap(data);
                    currently_displaying = "galaxy_map"
                }

            } catch (error) {
                document.getElementById('result').innerHTML = `<p>Error: ${error.message}</p>`;
            }
        }

        document.getElementById('getStarSystemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            clearAllInfo();
            const starSystemId = document.getElementById('starSystemId').value;
            try {
                const response = await fetch(`/star_system/${starSystemId}`);
                const dataString = await response.text();
                displayStarSystemData(starSystemId, dataString);
                currently_displaying = "star_system";
            } catch (error) {
                console.error("Error fetching star system data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch star system data</p>`;
            }
        });

        document.getElementById('getPlayerDataForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            clearAllInfo();
            const playerName = document.getElementById('playerName').value;
            try {
                const response = await fetch(`/player/${playerName}`);
                const dataString = await response.text();
                displayPlayerData(dataString);
                currently_displaying = "player";
            } catch (error) {
                console.error("Error fetching player data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch player data</p>`;
            }
        });

        document.getElementById('getGalaxyMapForm').addEventListener('click', async function(e) {
            e.preventDefault();
            clearAllInfo();
            try {
                const response = await fetch('/galaxy_map');
                const dataString = await response.text();
                displayGalaxyData(dataString);
                currently_displaying = "galaxy_map";
            } catch (error) {
                console.error("Error fetching galaxy data:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to fetch galaxy data</p>`;
            }
        });

        document.getElementById('fleetSearchForm').addEventListener('submit', (e) => {
            e.preventDefault();
            clearAllInfo();
            const ownerId = document.getElementById('fleetOwnerId').value;
            searchFleet(ownerId);
            currently_displaying = "fleet";
        });

        async function displayPlayerData(dataString) {
            try {
                const data = JSON.parse(dataString);
                
                // Main display
                const mainContent = `
                    <div class="info-panel">
                        <h2>Player Information</h2>
                        <h3>${data.name}</h3>
                        <p>Credits: ${data.credits?.toFixed(2) || 0}</p>
                        <h3>Resources</h3>
                        <table class="resource-table">
                            <tr><th>Resource Type</th><th>Quantity</th></tr>
                            ${Array.isArray(data.resources) ? data.resources.map(resource => `
                                <tr>
                                    <td>${resource.resource_type || 'N/A'}</td>
                                    <td>${resource.quantity || 0}</td>
                                </tr>
                            `).join('') : ''}
                        </table>
                    </div>
                `;
                document.getElementById('result').innerHTML = mainContent;

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse player data</p>`;
            }
        }  
    
        async function displayStarSystemData(id, dataString) {
            try {
                const data = JSON.parse(dataString);
                const starSystemInfo = document.createElement('div');
                starSystemInfo.innerHTML = `
                    <div class="star-details">
                        <h2>${data.star.name} System</h2>
                        <div style="display: flex; justify-content: space-between;">
                            <div>
                                <h3>Star Classification</h3>
                                <p>Type: ${data.star.star_type}</p>
                                <p>Coordinates: (${data.position.x}, ${data.position.y}, ${data.position.z})</p>
                            </div>
                            <div>
                                <h3>System Status</h3>
                                <p>Planets: ${data.planets.length}</p>
                                <p>Security Level: ${data.star.security_level || 'Unknown'}</p>
                            </div>
                        </div>
                    </div>

                    <h3>Planetary Bodies</h3>
                    <table class="star-system-table">
                        <tr>
                            <th>Name</th>
                            <th>Economy</th>
                            <th>Specialization</th>
                            <th>Danger</th>
                            <th>Biome</th>
                            <th>Actions</th>
                        </tr>
                        ${data.planets.map((planet, index) => `
                            <tr>
                                <td>${planet.name}</td>
                                <td>${planet.economy || 'N/A'}</td>
                                <td>${planet.specialization || 'N/A'}</td>
                                <td>${planet.danger || 'Low'}</td>
                                <td>${planet.biome || 'Unknown'}</td>
                                <td>
                                    <button onclick="showPlanetMarket(${id}, ${index})">View Market</button>
                                </td>
                            </tr>
                        `).join('')}
                    </table>
                `;
                document.getElementById('result').innerHTML = '';
                document.getElementById('result').appendChild(starSystemInfo);

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse star system data</p>`;
            }
        }

        async function showPlanetMarket(systemId, planetId) {
            try {
                // Remove any existing market displays
                const existingMarkets = document.querySelectorAll('.market-container');
                existingMarkets.forEach(market => market.remove());

                // Get player data
                const playerName = document.getElementById('playerName').value;
                if (!playerName) {
                    alert("Please enter your player name first");
                    return;
                }

                const playerResponse = await fetch(`/player/${playerName}`);
                const playerData = await playerResponse.text();
                const playerDataObj = JSON.parse(playerData);

                // Create a container for both market and player data
                const container = document.createElement('div');
                container.className = 'market-container';
                container.style.display = 'flex';
                container.style.flexDirection = 'column';
                container.style.gap = '20px';
                container.style.width = '100%';

                // Create player info panel
                const playerPanel = document.createElement('div');
                playerPanel.className = 'info-panel';
                playerPanel.style.width = '300px';
                playerPanel.style.position = 'fixed';
                playerPanel.style.top = '20px';
                playerPanel.style.right = '20px';
                playerPanel.style.zIndex = '1000';
                playerPanel.innerHTML = `
                    <h2>Player Information</h2>
                    <h3>${playerDataObj.name}</h3>
                    <p>Credits: ${playerDataObj.credits?.toFixed(2) || 0}</p>
                    <h3>Resources</h3>
                    <table class="resource-table">
                        <tr><th>Resource Type</th><th>Quantity</th></tr>
                        ${Array.isArray(playerDataObj.resources) ? playerDataObj.resources.map(resource => `
                            <tr>
                                <td>${resource.resource_type || 'N/A'}</td>
                                <td>${resource.quantity || 0}</td>
                            </tr>
                        `).join('') : ''}
                    </table>
                `;

                // Create market panel
                const marketPanel = document.createElement('div');
                marketPanel.className = 'market-panel info-panel';
                marketPanel.style.width = '80%';
                marketPanel.style.maxWidth = '1200px';
                marketPanel.style.position = 'fixed';
                marketPanel.style.left = '50%';
                marketPanel.style.top = '50%';
                marketPanel.style.transform = 'translate(-50%, -50%)';
                marketPanel.style.zIndex = '1000';
                marketPanel.style.maxHeight = '80vh';
                marketPanel.style.overflowY = 'auto';
                marketPanel.style.backgroundColor = 'rgba(255, 255, 255, 0.95)';
                marketPanel.style.padding = '20px';
                marketPanel.style.borderRadius = '10px';
                marketPanel.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
                const marketResponse = await fetch(`/planet/${systemId}/${planetId}/market`);
                const marketData = await marketResponse.json();
                marketPanel.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3 style="margin: 0;">Planet Market</h3>
                        <button onclick="this.closest('.market-panel').remove()" style="padding: 5px 10px;">Close</button>
                    </div>
                    <table class="resource-table" style="width: 100%;">
                        <tr>
                            <th style="width: 20%;">Resource</th>
                            <th style="width: 15%;">Buy Price</th>
                            <th style="width: 15%;">Sell Price</th>
                            <th style="width: 15%;">Stock</th>
                            <th style="width: 35%;">Actions</th>
                        </tr>
                        ${marketData.map(resource => {
                            const playerResource = playerDataObj.resources?.find(r => r.resource_type === resource.resource_type);
                            const playerQuantity = playerResource?.quantity || 0;
                            const planetQuantity = resource.quantity || 0;
                            
                            return `
                                <tr>
                                    <td>${resource.resource_type}</td>
                                    <td>${resource.buy ? resource.buy.toFixed(2) : 'N/A'}</td>
                                    <td>${resource.sell ? resource.sell.toFixed(2) : 'N/A'}</td>
                                    <td>${planetQuantity}</td>
                                    <td>
                                        <div class="trade-actions">
                                            ${resource.buy ? `
                                                <div class="custom-amount" style="display: inline-flex; gap: 5px; align-items: center;">
                                                    <input type="number" min="1" max="${planetQuantity}" 
                                                        id="buy-${resource.resource_type}" placeholder="Amount" style="width: 80px;">
                                                    <button onclick="buyResource(${systemId}, ${planetId}, '${resource.resource_type}', 
                                                        parseInt(document.getElementById('buy-${resource.resource_type}').value))" >Buy</button>
                                                </div>
                                            ` : ''}
                                            ${resource.sell ? `
                                                <div class="custom-amount" style="display: inline-flex; gap: 5px; align-items: center;">
                                                    <input type="number" min="1" max="${playerQuantity}"
                                                        id="sell-${resource.resource_type}" placeholder="Amount" style="width: 80px;">
                                                    <button onclick="sellResource(${systemId}, ${planetId}, '${resource.resource_type}', 
                                                        parseInt(document.getElementById('sell-${resource.resource_type}').value))" >Sell</button>
                                                </div>
                                            ` : ''}
                                        </div>
                                    </td>
                                </tr>
                            `;
                        }).join('')}
                    </table>
                `;

                // Add both panels to the container
                container.appendChild(playerPanel);
                container.appendChild(marketPanel);
                document.getElementById('result').appendChild(container);
            } catch (error) {
                console.error("Error fetching market data:", error);
                document.getElementById('result').innerHTML += `<p>Error: Unable to load market data</p>`;
            }
        }

        async function buyResource(systemId, planetId, resourceType, quantity) {
            try {
                const response = await fetch(`/planet/${systemId}/${planetId}/buy/${resourceType}/${quantity}`);
                const result = await response.json();
                
                // Create feedback message
                const feedbackDiv = document.createElement('div');
                feedbackDiv.className = 'info-panel notification';
                feedbackDiv.style.backgroundColor = '#e8f5e9';
                feedbackDiv.style.marginBottom = '10px';
                feedbackDiv.style.position = 'relative';
                feedbackDiv.style.paddingRight = '30px';
                feedbackDiv.innerHTML = `
                    ${result}
                    <span class="close-notification" onclick="this.parentElement.remove()">&times;</span>
                `;
                document.getElementById('result').insertBefore(feedbackDiv, document.querySelector('.market-container'));
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (feedbackDiv.parentNode) {
                        feedbackDiv.remove();
                    }
                }, 5000);
                
                // Refresh both displays
                await showPlanetMarket(systemId, planetId);
            } catch (error) {
                console.error("Error buying resource:", error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'info-panel notification';
                errorDiv.style.backgroundColor = '#ffebee';
                errorDiv.style.marginBottom = '10px';
                errorDiv.style.position = 'relative';
                errorDiv.style.paddingRight = '30px';
                errorDiv.innerHTML = `
                    Error buying resource
                    <span class="close-notification" onclick="this.parentElement.remove()">&times;</span>
                `;
                document.getElementById('result').insertBefore(errorDiv, document.querySelector('.market-container'));
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (errorDiv.parentNode) {
                        errorDiv.remove();
                    }
                }, 5000);
            }
        }

        async function sellResource(systemId, planetId, resourceType, quantity) {
            try {
                const response = await fetch(`/planet/${systemId}/${planetId}/sell/${resourceType}/${quantity}`);
                const result = await response.json();
                
                // Create feedback message
                const feedbackDiv = document.createElement('div');
                feedbackDiv.className = 'info-panel notification';
                feedbackDiv.style.backgroundColor = '#e8f5e9';
                feedbackDiv.style.marginBottom = '10px';
                feedbackDiv.style.position = 'relative';
                feedbackDiv.style.paddingRight = '30px';
                feedbackDiv.innerHTML = `
                    ${result}
                    <span class="close-notification" onclick="this.parentElement.remove()">&times;</span>
                `;
                document.getElementById('result').insertBefore(feedbackDiv, document.querySelector('.market-container'));
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (feedbackDiv.parentNode) {
                        feedbackDiv.remove();
                    }
                }, 5000);
                
                // Refresh both displays
                await showPlanetMarket(systemId, planetId);
            } catch (error) {
                console.error("Error selling resource:", error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'info-panel notification';
                errorDiv.style.backgroundColor = '#ffebee';
                errorDiv.style.marginBottom = '10px';
                errorDiv.style.position = 'relative';
                errorDiv.style.paddingRight = '30px';
                errorDiv.innerHTML = `
                    Error selling resource
                    <span class="close-notification" onclick="this.parentElement.remove()">&times;</span>
                `;
                document.getElementById('result').insertBefore(errorDiv, document.querySelector('.market-container'));
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (errorDiv.parentNode) {
                        errorDiv.remove();
                    }
                }, 5000);
            }
        }

        async function displayGalaxyData(dataString) {
            try {
                const data = JSON.parse(dataString);
                const galaxyInfo = document.createElement('div');
                let systemsHtml = '';

                data.forEach(system => {
                    systemsHtml += `
                        <div class="star-details">
                            <h3>${system.star.name}</h3>
                            <p>Type: ${system.star.star_type}</p>
                            <p>Location: (${system.position.x}, ${system.position.y}, ${system.position.z})</p>
                            <p>Planets: ${system.planets.length}</p>
                        </div>
                    `;
                });

                galaxyInfo.innerHTML = `
                    <h2>Galaxy Map</h2>
                    ${systemsHtml}
                `;
                
                document.getElementById('result').innerHTML = '';
                document.getElementById('result').appendChild(galaxyInfo);

            } catch (error) {
                console.error("Error parsing JSON:", error);
                document.getElementById('result').innerHTML = `<p>Error: Unable to parse galaxy data</p>`;
            }
        }

        async function searchFleet(ownerId) {
            try {
                const response = await fetch(`/fleets/${ownerId}`);
                const fleets = await response.json();
                
                if (fleets && fleets.length > 0) {
                    document.getElementById('result').innerHTML = fleets.map(fleet => `
                        <div class="info-panel">
                            <h4>${fleet.name}</h4>
                            <p>Owner: ${fleet.owner_id}</p>
                            <p>Location: (${fleet.position.x}, ${fleet.position.y}, ${fleet.position.z})</p>
                            <p>Total Ships: ${fleet.ships.length}</p>
                            <h5>Ships:</h5>
                            <table class="fleet-table">
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Health</th>
                                    <th>Shields</th>
                                    <th>Weapons</th>
                                    <th>Cargo</th>
                                </tr>
                                ${fleet.ships.map(ship => {
                                    const cargoCapacity = {
                                        'Tiny': 100,
                                        'Small': 250,
                                        'Medium': 500,
                                        'Large': 1000,
                                        'Huge': 2500,
                                        'Planetary': 5000
                                    }[ship.size] || 0;
                                    
                                    const currentCargo = ship.cargo.reduce((sum, resource) => 
                                        sum + (resource.quantity || 0), 0);
                                    
                                    return `
                                    <tr>
                                        <td>${ship.name}</td>
                                        <td>${ship.specialization}</td>
                                        <td>${ship.hp}/100</td>
                                        <td>${ship.shields.strength}/100</td>
                                        <td>${ship.weapons ? ship.weapons.map(w => {
                                            const weaponName = Object.keys(w)[0];
                                            return weaponName.replace(/([A-Z])/g, ' $1').trim();
                                        }).join(', ') : 'None'}</td>
                                        <td>${currentCargo}/${cargoCapacity} units</td>
                                    </tr>
                                `}).join('')}
                            </table>
                        </div>
                    `).join('<hr>');
                } else {
                    document.getElementById('result').innerHTML = '<p>No fleets found</p>';
                }
            } catch (error) {
                console.error("Error loading fleet information:", error);
                document.getElementById('result').innerHTML = '<p>Error loading fleet information</p>';
            }
        }
    </script>
</body>
</html>